{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "carNFTAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_carID",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "_driverExperienceYears",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "_newContractDurationIndex",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "_mileageCapIndex",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "_company",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_customer",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "EtherReceived",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "checkContractValue",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "checkUpkeep",
				"outputs": [
					{
						"internalType": "bool",
						"name": "upkeepNeeded",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "confirmDeal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "_extendedContractDurationIndex",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "_extendedContractMileageCapIndex",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "_milesTotal",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "_driverExperienceYears",
						"type": "uint8"
					}
				],
				"name": "extendLease",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCarId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCarNFT",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "model",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "color",
								"type": "string"
							},
							{
								"internalType": "uint16",
								"name": "yearOfMatriculation",
								"type": "uint16"
							},
							{
								"internalType": "uint256",
								"name": "originalValue",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "mileage",
								"type": "uint256"
							}
						],
						"internalType": "struct Car",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCarNFTContract",
				"outputs": [
					{
						"internalType": "contract CarNFT",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCompany",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getContractDuration",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getContractMileageCap",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCustomer",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDownPayment",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMonthlyQuota",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isCompanyConfirmed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_carID",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "_driverExperienceYears",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "_newContractDurationIndex",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "_mileageCapIndex",
						"type": "uint8"
					}
				],
				"name": "leaseNewCar",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "payMonthlyQuota",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "performUpkeep",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "registerDeal",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "terminateLease",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "The contract uses the CarNFT contract for managing the car NFTs and enforcing ownership.",
			"kind": "dev",
			"methods": {
				"checkUpkeep(bytes)": {
					"details": "The contract needs upkeep if the deal registration deadline has passed or if the customer has not paid their monthly quota on time."
				},
				"confirmDeal()": {
					"details": "The company confirms the deal and transfers the first monthly quota to themselves. It is assumed that the customer is retrieving the car the next day, and can pay for the next period in the next 30 days."
				},
				"constructor": {
					"details": "The contract is deployed by the company, and the car NFT is transferred to the company.",
					"params": {
						"_carID": "The ID of the car NFT",
						"_company": "The address of the company that is leasing the car",
						"_customer": "The address of the customer",
						"_driverExperienceYears": "The number of years of driving experience of the customer",
						"_mileageCapIndex": "The index of the selected mileage cap",
						"_newContractDurationIndex": "The index of the selected contract duration",
						"carNFTAddress": "The address of the CarNFT contract"
					}
				},
				"extendLease(uint8,uint8,uint256,uint8)": {
					"details": "The customer can extend the lease agreement with new parameters such as contract duration, driver experience years, and mileage cap.",
					"params": {
						"_driverExperienceYears": "The number of years of driving experience of the customer",
						"_extendedContractDurationIndex": "The index of the new contract duration",
						"_extendedContractMileageCapIndex": "The index of the new mileage cap",
						"_milesTotal": "The number of miles expended by the customer"
					}
				},
				"leaseNewCar(uint256,uint8,uint8,uint8)": {
					"details": "Allows the customer to lease a new car.",
					"params": {
						"_carID": "The ID of the new car",
						"_driverExperienceYears": "The customer's years of driving experience",
						"_mileageCapIndex": "The index of the new mileage cap",
						"_newContractDurationIndex": "The index of the new contract duration"
					}
				},
				"payMonthlyQuota()": {
					"details": "The customer pays the monthly quota to the contract. If the payment is higher than the monthly quota, the excess amount is returned to the customer."
				},
				"performUpkeep(bytes)": {
					"details": "If the deal registration deadline has passed, the customer's payment is transferred back to them."
				},
				"registerDeal()": {
					"details": "The customer must pay the down payment and the first monthly quota to register the deal."
				},
				"terminateLease()": {
					"details": "The customer can only terminate the lease agreement at the end of the contract duration after the last monthly payment has been made."
				}
			},
			"title": "LeaseAgreement",
			"version": 1
		},
		"userdoc": {
			"events": {
				"EtherReceived(address,uint256)": {
					"notice": "Event emitted when Ether is received"
				}
			},
			"kind": "user",
			"methods": {
				"checkContractValue()": {
					"notice": "Gets the balance of the contract"
				},
				"checkUpkeep(bytes)": {
					"notice": "Checks if the contract needs upkeep."
				},
				"confirmDeal()": {
					"notice": "Confirms the lease agreement by the company."
				},
				"constructor": {
					"notice": "Creates a new lease agreement for a car between a company and a customer."
				},
				"extendLease(uint8,uint8,uint256,uint8)": {
					"notice": "Extends the lease agreement with new parameters."
				},
				"getCarId()": {
					"notice": "Getter for the car ID"
				},
				"getCarNFT()": {
					"notice": "Getter for carNFT"
				},
				"getCarNFTContract()": {
					"notice": "Getter for carNFTContract"
				},
				"getCompany()": {
					"notice": "Getter for company"
				},
				"getContractDuration()": {
					"notice": "Getter for contractDuration"
				},
				"getContractMileageCap()": {
					"notice": "Getter for mileageCap"
				},
				"getCustomer()": {
					"notice": "Getter for customer"
				},
				"getDownPayment()": {
					"notice": "Getter for downPayment"
				},
				"getMonthlyQuota()": {
					"notice": "Getter for monthlyQuota"
				},
				"isCompanyConfirmed()": {
					"notice": "Getter for companyConfirmed"
				},
				"leaseNewCar(uint256,uint8,uint8,uint8)": {
					"notice": "Leases a new car under the same agreement."
				},
				"payMonthlyQuota()": {
					"notice": "Pays the monthly quota for the lease agreement."
				},
				"performUpkeep(bytes)": {
					"notice": "Performs the upkeep of the lease agreement."
				},
				"registerDeal()": {
					"notice": "Registers a new lease agreement between the company and the customer."
				},
				"terminateLease()": {
					"notice": "Terminates the lease agreement."
				}
			},
			"notice": "Implements a lease agreement contract for a car between a company and a customer.  This contract provides functionalities for lease registration, confirmation, monthly payments, termination, and extension  of the contract. The contract utilizes Chainlink Keepers for automated upkeep checks.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/LeaseAgreement.sol": "LeaseAgreement"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts/src/v0.8/AutomationBase.sol": {
			"keccak256": "0xefd1603987351872d57fc092f54ce51d275a8cdce351f40afedbec52474e8405",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f389cd2301683e0a63e83829dda77cfd1293c3b5195271cf24edc679e8913dd",
				"dweb:/ipfs/QmVvRnkqEtHE5okQUoJkRP2gNs4j7FadbSGirTWdQsY29c"
			]
		},
		"@chainlink/contracts/src/v0.8/AutomationCompatible.sol": {
			"keccak256": "0x160761445c58aedce801a1c8f95d68562132a0c9766b53742ee10c7a7c307a79",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ec8a2fdc84e9562d989335904c859f3ad4bfb3e63b06d7c9ad870801506ee3b",
				"dweb:/ipfs/QmYzDQyNAbP2DqWmMJzKYczKBFBfgmorHzCNMJQ1FBrmLP"
			]
		},
		"@chainlink/contracts/src/v0.8/KeeperCompatible.sol": {
			"keccak256": "0x81cb81ec1e0bedc9e0894e7b0aac52da030b667e3820030aad072e0c6f6e4716",
			"license": "MIT",
			"urls": [
				"bzz-raw://9ba403f2e825810718ca00a8407959d831a01616caa26be1a9d6f0297e3086ec",
				"dweb:/ipfs/QmYYLoBoHH1hVjZQUoogr1PCoAT9Ng3SLs8RarFTq5UiPU"
			]
		},
		"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
			"keccak256": "0xbdf0b47389f34a3d09ac1b733aa59adf1257454e84a837e28091cc7628f117e1",
			"license": "MIT",
			"urls": [
				"bzz-raw://13b9cc26d54e4827a4369ec6909b6efafaad26632f8bd08afb17bfd57d094e7f",
				"dweb:/ipfs/QmQVP9c8BXkB4e6fc27ucEPFkGSLc6h8Bfte6qW3WMrwmN"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
			"license": "MIT",
			"urls": [
				"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
				"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
			]
		},
		"@openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x39ed367e54765186281efcfe83e47cf0ad62cc879f10e191360712507125f29a",
			"license": "MIT",
			"urls": [
				"bzz-raw://2c5ae6d85bd48cca8d6d2fcec8c63efd86f56f8a5832577a47e403ce0e65cb09",
				"dweb:/ipfs/QmUtcS8AbRSWhuc61puYet58os8FvSqm329ChoW8wwZXZk"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261",
			"license": "MIT",
			"urls": [
				"bzz-raw://6b7f97c5960a50fd1822cb298551ffc908e37b7893a68d6d08bce18a11cb0f11",
				"dweb:/ipfs/QmQQvxBytoY1eBt3pRQDmvH2hZ2yjhs12YqVfzGm7KSURq"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d",
			"license": "MIT",
			"urls": [
				"bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34",
				"dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02",
				"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE"
			]
		},
		"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol": {
			"keccak256": "0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855",
			"license": "MIT",
			"urls": [
				"bzz-raw://746d295e403931aeb9d6065fd5a0871f43ab5459814a60623611e4b6641a09fd",
				"dweb:/ipfs/QmWrgT8YJrQ9FfD1o3YYArwo57e7MGdpFKuM74qJ4qE34E"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed",
			"license": "MIT",
			"urls": [
				"bzz-raw://0564ddb19c6d870e27b789d8f985283d815267ad7224883c2d5243c8bacc7dc0",
				"dweb:/ipfs/QmeC953H4sj88ZRFdJNFdmpf7J9SksP1wK4jyMHLo66z49"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287",
				"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
				"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d",
				"dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
				"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
			]
		},
		"contracts/CarNFT.sol": {
			"keccak256": "0xef7569b86ee655524899af4bcf5c2db354167202177513cd5fc54c0a7dbac2d9",
			"license": "MIT",
			"urls": [
				"bzz-raw://106387cedd322d78d0f82392dd9b5cf4ddb5e01e5693d997aecd310de0d94887",
				"dweb:/ipfs/QmQN9qXPMmXek1NsU819zyrgmT586dWLVDNF9SMfcBoSFx"
			]
		},
		"contracts/LeaseAgreement.sol": {
			"keccak256": "0x1879da23fe0e59ec5a317360db76e8bf2756c94fc97d1fa6f555a68c6e1c6bf4",
			"license": "MIT",
			"urls": [
				"bzz-raw://144875e28a85a92bfcacd9557b019765eea5c53c084b0101383d74e3ff9ddfc8",
				"dweb:/ipfs/QmYFJkTEF4sHTBr1LRpbWA1sCkRLzmSFCrcPxi9moaAwdz"
			]
		},
		"contracts/structs/CarStruct.sol": {
			"keccak256": "0x9554754e6f3b0d5ba3844aeb7ec5f1578729fc7432c525cb41d5124bafb91880",
			"license": "MIT",
			"urls": [
				"bzz-raw://088f5e6fab76ab89ba27f2fc0b8303df76af1b8e05716af080f0ccf6c52a88bc",
				"dweb:/ipfs/QmZoXCr1qbRpZV5jBRmC8GRbupiyRhjNMASXFzzRbosNhC"
			]
		}
	},
	"version": 1
}